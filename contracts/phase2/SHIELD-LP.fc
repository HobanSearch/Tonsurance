;; SHIELD-LP Token - Primary Vault Deposit Token (Jetton TEP-74)
;; Represents pro-rata share of Primary Vault deposits
;; Fully liquid, tradeable on DEXs, earns yield from insurance premiums
;; Minted on deposit to Primary Vault, burned on withdrawal

#include "../imports/stdlib.fc";

;; Storage for Jetton Master
global int total_supply;
global int mintable;
global slice admin_address;
global slice primary_vault_address;
global cell jetton_wallet_code;
global cell content;  ;; Token metadata

const int DECIMALS = 1000000000;  ;; 9 decimals

() load_data() impure {
    slice ds = get_data().begin_parse();
    total_supply = ds~load_coins();
    mintable = ds~load_int(1);
    admin_address = ds~load_msg_addr();
    primary_vault_address = ds~load_msg_addr();
    jetton_wallet_code = ds~load_ref();
    content = ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_int(mintable, 1)
        .store_slice(admin_address)
        .store_slice(primary_vault_address)
        .store_ref(jetton_wallet_code)
        .store_ref(content)
        .end_cell());
}

() check_vault(slice sender_address) impure {
    throw_unless(403, equal_slices_bits(sender_address, primary_vault_address));
}

;; Mint tokens (called by Primary Vault on deposit)
() mint_tokens(slice sender_address, slice to_address, int amount, slice response_address, int query_id) impure {
    load_data();
    check_vault(sender_address);
    throw_unless(74, mintable);

    total_supply += amount;
    save_data();

    ;; Create wallet and send tokens
    cell wallet_state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice wallet_address = calculate_jetton_wallet_address(wallet_state_init);

    cell body = begin_cell()
        .store_uint(0x178d4519, 32)  ;; op: internal_transfer
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(primary_vault_address)
        .store_slice(response_address)
        .store_coins(0)
        .store_uint(0, 1)  ;; forward payload
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(wallet_address)
        .store_coins(100000000)  ;; 0.1 TON for gas
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(wallet_state_init)
        .store_ref(body)
        .end_cell();

    send_raw_message(msg, 1);

    ;; Emit event
    emit_log(0x80, begin_cell()
        .store_slice(to_address)
        .store_coins(amount)
        .store_coins(total_supply)
        .end_cell().begin_parse());
}

;; Burn tokens (called by Primary Vault on withdrawal)
() burn_tokens(slice sender_address, int amount, slice from_address, slice response_address, int query_id) impure {
    load_data();
    check_vault(sender_address);

    total_supply -= amount;
    throw_unless(75, total_supply >= 0);

    save_data();

    ;; Send response
    if (response_address.preload_uint(2) != 0) {
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0x7bdd97de, 32)  ;; op: burn_notification
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(from_address)
            .end_cell();
        send_raw_message(msg, 64);
    }

    ;; Emit event
    emit_log(0x81, begin_cell()
        .store_slice(from_address)
        .store_coins(amount)
        .store_coins(total_supply)
        .end_cell().begin_parse());
}

;; Admin: Set Primary Vault address
() set_primary_vault(slice sender_address, slice new_address) impure {
    load_data();
    throw_unless(403, equal_slices_bits(sender_address, admin_address));
    primary_vault_address = new_address;
    save_data();
}

;; Admin: Toggle mintable
() toggle_mintable(slice sender_address) impure {
    load_data();
    throw_unless(403, equal_slices_bits(sender_address, admin_address));
    mintable = ~ mintable;
    save_data();
}

;; Get methods (TEP-74 standard)
(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    return (total_supply, mintable, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    cell wallet_state_init = calculate_jetton_wallet_state_init(owner_address, my_address(), jetton_wallet_code);
    return calculate_jetton_wallet_address(wallet_state_init);
}

slice get_primary_vault() method_id {
    load_data();
    return primary_vault_address;
}

int get_total_supply() method_id {
    load_data();
    return total_supply;
}

;; Recv internal
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == 21) {  ;; mint
        int query_id = in_msg_body~load_uint(64);
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        slice response_address = in_msg_body~load_msg_addr();
        mint_tokens(sender_address, to_address, amount, response_address, query_id);
        return ();
    }

    if (op == 0x595f07bc) {  ;; burn_notification
        int query_id = in_msg_body~load_uint(64);
        int amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        slice response_address = in_msg_body~load_msg_addr();
        burn_tokens(sender_address, amount, from_address, response_address, query_id);
        return ();
    }

    if (op == 0x10) {  ;; set_primary_vault
        slice new_address = in_msg_body~load_msg_addr();
        set_primary_vault(sender_address, new_address);
        return ();
    }

    if (op == 0x11) {  ;; toggle_mintable
        toggle_mintable(sender_address);
        return ();
    }

    throw(0xffff);
}

;; Note: emit_log() is now implemented in stdlib.fc
;; SHIELD-LP uses event logging for LP token operations

;; Helper functions (placeholders - implement with full Jetton standard)
cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(jetton_wallet_code)
        .store_dict(
            begin_cell()
                .store_coins(0)
                .store_slice(owner_address)
                .store_slice(jetton_master_address)
                .store_ref(jetton_wallet_code)
                .end_cell()
        )
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}
