name: Hedged Insurance Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'hedging/**'
      - 'contracts/hedged/**'
      - 'contracts/shared/**'
      - 'tests/hedging/**'
      - 'wrappers/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  unit-tests-contracts:
    name: Unit Tests - Smart Contracts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build contracts
        run: npx blueprint build

      - name: Run contract unit tests
        run: npm run test:unit:contracts
        env:
          CI: true

      - name: Upload contract coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/contracts/coverage-final.json
          flags: unit-contracts
          name: contract-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  unit-tests-services:
    name: Unit Tests - Off-Chain Services
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run service unit tests
        run: npm run test:unit:services
        env:
          CI: true

      - name: Upload service coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/services/coverage-final.json
          flags: unit-services
          name: service-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  unit-tests-connectors:
    name: Unit Tests - External Connectors
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run connector unit tests
        run: npm run test:unit:connectors
        env:
          CI: true

      - name: Upload connector coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/connectors/coverage-final.json
          flags: unit-connectors
          name: connector-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: tonsurance_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tonsurance_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build contracts
        run: npx blueprint build

      - name: Start mock API servers
        run: |
          npm run mock:polymarket &
          npm run mock:perpetuals &
          npm run mock:allianz &
          echo "Waiting for mock servers to start..."
          sleep 5
        env:
          NODE_ENV: test

      - name: Verify mock servers are running
        run: |
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3002/health || exit 1
          curl -f http://localhost:3003/health || exit 1

      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://tonsurance_test:test_password@localhost:5432/tonsurance_test
          POLYMARKET_API_URL: http://localhost:3001
          BINANCE_API_URL: http://localhost:3002
          ALLIANZ_API_URL: http://localhost:3003

      - name: Upload integration coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/integration/coverage-final.json
          flags: integration
          name: integration-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application server
        run: npm start &
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Wait for server to be ready
        run: npx wait-on http://localhost:3000 -t 60000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
          retention-days: 7

      - name: Upload E2E coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/e2e/coverage-final.json
          flags: e2e
          name: e2e-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  coverage-check:
    name: Coverage Check
    needs: [unit-tests-contracts, unit-tests-services, unit-tests-connectors, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage/

      - name: Merge coverage reports
        run: npm run coverage:merge

      - name: Check coverage thresholds
        run: npm run coverage:check
        env:
          # Thresholds from jest.config.ts:
          # - Contracts: 95%
          # - Services: 90%
          # - Integration: 85%
          # - E2E: 75%
          CI: true

      - name: Upload merged coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/merged/coverage-final.json
          flags: merged
          name: merged-coverage
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-testnet:
    name: Deploy to TON Testnet
    needs: [lint-and-typecheck, unit-tests-contracts, unit-tests-services, integration-tests, coverage-check]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment:
      name: testnet
      url: https://testnet.tonscan.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build contracts
        run: npx blueprint build

      - name: Deploy PricingOracle to testnet
        run: npx blueprint run deployPricingOracle --testnet --tonconnect
        env:
          DEPLOYER_MNEMONIC: ${{ secrets.TESTNET_DEPLOYER_MNEMONIC }}

      - name: Deploy HedgeCoordinator to testnet
        run: npx blueprint run deployHedgeCoordinator --testnet --tonconnect
        env:
          DEPLOYER_MNEMONIC: ${{ secrets.TESTNET_DEPLOYER_MNEMONIC }}

      - name: Deploy HedgedPolicyFactory to testnet
        run: npx blueprint run deployHedgedPolicyFactory --testnet --tonconnect
        env:
          DEPLOYER_MNEMONIC: ${{ secrets.TESTNET_DEPLOYER_MNEMONIC }}

      - name: Run testnet smoke tests
        run: npm run test:smoke:testnet
        env:
          TESTNET_PRICING_ORACLE: ${{ env.TESTNET_PRICING_ORACLE }}
          TESTNET_HEDGE_COORDINATOR: ${{ env.TESTNET_HEDGE_COORDINATOR }}
          TESTNET_POLICY_FACTORY: ${{ env.TESTNET_POLICY_FACTORY }}

      - name: Update deployment addresses
        run: |
          echo "TESTNET_PRICING_ORACLE=${{ env.TESTNET_PRICING_ORACLE }}" >> $GITHUB_ENV
          echo "TESTNET_HEDGE_COORDINATOR=${{ env.TESTNET_HEDGE_COORDINATOR }}" >> $GITHUB_ENV
          echo "TESTNET_POLICY_FACTORY=${{ env.TESTNET_POLICY_FACTORY }}" >> $GITHUB_ENV

  notify-success:
    name: Notify Success
    needs: [deploy-testnet]
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Send success notification
        run: |
          echo "✅ All tests passed and deployed to testnet successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

  notify-failure:
    name: Notify Failure
    needs: [lint-and-typecheck, unit-tests-contracts, unit-tests-services, unit-tests-connectors, integration-tests, e2e-tests, coverage-check]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "❌ Pipeline failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Check the logs for details."
