;; Jetton Wallet Contract (TEP-74 Standard)
;; Manages individual user balances for Jetton tokens
;; Handles transfers, burns, and balance queries

#include "imports/stdlib.fc";

;; Forward declarations
cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline;
slice calculate_jetton_wallet_address(cell state_init) inline;
slice null_addr() inline;

;; Storage
global int balance;
global slice owner_address;
global slice jetton_master_address;
global cell jetton_wallet_code;

;; Error codes
const int error::not_enough_balance = 400;
const int error::wrong_workchain = 333;
const int error::not_owner = 401;
const int error::not_valid_wallet = 402;

;; Gas
const int gas::burn_notification = 100000000; ;; 0.1 TON

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    balance = ds~load_coins();
    owner_address = ds~load_msg_addr();
    jetton_master_address = ds~load_msg_addr();
    jetton_wallet_code = ds~load_ref();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell()
    );
}

() send_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();

    ;; Verify sender is owner
    throw_unless(error::not_owner, equal_slices_bits(sender_address, owner_address));

    balance -= jetton_amount;
    throw_unless(error::not_enough_balance, balance >= 0);

    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_dict();
    int forward_ton_amount = in_msg_body~load_coins();

    int fwd_count = forward_ton_amount ? 2 : 1;
    throw_unless(708, msg_value > forward_ton_amount + fwd_count * fwd_fee + 2 * gas::burn_notification);

    cell payload = in_msg_body~load_dict();

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(
            begin_cell()
                .store_uint(0x178d4519, 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount)
                .store_slice(owner_address)
                .store_slice(response_address)
                .store_coins(forward_ton_amount)
                .store_dict(payload)
                .end_cell()
        )
        .end_cell();
    send_raw_message(msg, 64);

    save_data();
}

() receive_tokens(slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    int forward_ton_amount = in_msg_body~load_coins();

    ;; Verify sender is valid jetton wallet
    cell expected_state_init = calculate_jetton_wallet_state_init(from_address, jetton_master_address, jetton_wallet_code);
    slice expected_address = calculate_jetton_wallet_address(expected_state_init);
    throw_unless(error::not_valid_wallet, equal_slices_bits(sender_address, expected_address));

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = 10000000;
    throw_unless(708, ton_balance_before_msg + msg_value >= storage_fee + forward_ton_amount);

    if (forward_ton_amount > 0) {
        cell payload = in_msg_body~load_dict();

        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(owner_address)
            .store_coins(forward_ton_amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(
                begin_cell()
                    .store_uint(0x7362d09c, 32)
                    .store_uint(query_id, 64)
                    .store_coins(jetton_amount)
                    .store_slice(from_address)
                    .store_dict(payload)
                    .end_cell()
            )
            .end_cell();
        send_raw_message(msg, 1);
    }

    if (~ equal_slices_bits(response_address, null_addr())) {
        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0xd53276db, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(from_address)
            .store_slice(owner_address)
            .end_cell();
        send_raw_message(msg, 2 + 64);
    }

    save_data();
}

() burn_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();

    ;; Verify sender is owner
    throw_unless(error::not_owner, equal_slices_bits(sender_address, owner_address));

    balance -= jetton_amount;
    throw_unless(error::not_enough_balance, balance >= 0);

    throw_unless(708, msg_value > fwd_fee + 2 * gas::burn_notification);

    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(jetton_master_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x595f07bc, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
        .end_cell();
    send_raw_message(msg, 64);

    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == 0xf8a7ea5) {  ;; transfer
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == 0x178d4519) {  ;; internal_transfer
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == 0x595f07bc) {  ;; burn
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(0xffff);
}

;; Get methods
(int, slice, slice, cell) get_wallet_data() method_id {
    load_data();
    return (balance, owner_address, jetton_master_address, jetton_wallet_code);
}

;; Helper functions
cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(jetton_wallet_code)
        .store_dict(
            begin_cell()
                .store_coins(0)
                .store_slice(owner_address)
                .store_slice(jetton_master_address)
                .store_ref(jetton_wallet_code)
                .end_cell()
        )
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice null_addr() inline {
    return begin_cell().store_uint(0, 2).end_cell().begin_parse();
}
