;; AdvancedPremiumDistributor Contract - Phase 2
;; Routes premiums to 8 parties in async messages
;; Distribution: Primary LPs: 45%, Secondary Stakers: 20%, Referrers: 10%,
;;               Oracles: 3%, Protocol: 7%, Governance: 2%, Reserve: 3%, TradFi: 10%

#include "../imports/stdlib.fc";

;; Storage structure
global slice owner_address;
global slice primary_vault_address;
global slice secondary_vault_address;
global slice referral_manager_address;
global slice oracle_rewards_address;
global slice protocol_treasury_address;
global slice governance_rewards_address;
global slice reserve_fund_address;
global slice tradfi_buffer_address;
global int total_premiums_distributed;
global int distribution_count;

;; Distribution percentages (in basis points)
const int SHARE_PRIMARY = 4500;          ;; 45%
const int SHARE_SECONDARY = 2000;        ;; 20%
const int SHARE_REFERRER = 1000;         ;; 10%
const int SHARE_ORACLE = 300;            ;; 3%
const int SHARE_PROTOCOL = 700;          ;; 7%
const int SHARE_GOVERNANCE = 200;        ;; 2%
const int SHARE_RESERVE = 300;           ;; 3%
const int SHARE_TRADFI = 1000;           ;; 10%
const int BASIS_POINTS = 10000;

() load_data() impure {
    slice ds = get_data().begin_parse();
    owner_address = ds~load_msg_addr();
    primary_vault_address = ds~load_msg_addr();
    secondary_vault_address = ds~load_msg_addr();

    slice ds_ref1 = ds~load_ref().begin_parse();
    referral_manager_address = ds_ref1~load_msg_addr();
    oracle_rewards_address = ds_ref1~load_msg_addr();
    protocol_treasury_address = ds_ref1~load_msg_addr();

    slice ds_ref2 = ds_ref1~load_ref().begin_parse();
    governance_rewards_address = ds_ref2~load_msg_addr();
    reserve_fund_address = ds_ref2~load_msg_addr();
    tradfi_buffer_address = ds_ref2~load_msg_addr();

    total_premiums_distributed = ds~load_coins();
    distribution_count = ds~load_uint(64);
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_slice(primary_vault_address)
        .store_slice(secondary_vault_address)
        .store_ref(
            begin_cell()
                .store_slice(referral_manager_address)
                .store_slice(oracle_rewards_address)
                .store_slice(protocol_treasury_address)
                .store_ref(
                    begin_cell()
                        .store_slice(governance_rewards_address)
                        .store_slice(reserve_fund_address)
                        .store_slice(tradfi_buffer_address)
                        .end_cell()
                )
                .end_cell()
        )
        .store_coins(total_premiums_distributed)
        .store_uint(distribution_count, 64)
        .end_cell());
}

() check_owner(slice sender_address) impure {
    throw_unless(403, equal_slices_bits(sender_address, owner_address));
}

;; Distribute premium to 8 parties (async)
() distribute_premium(
    int premium_amount,
    int policy_id,
    slice user_address
) impure {
    throw_unless(400, premium_amount > 0);

    ;; Calculate shares
    int primary_share = muldiv(premium_amount, SHARE_PRIMARY, BASIS_POINTS);
    int secondary_share = muldiv(premium_amount, SHARE_SECONDARY, BASIS_POINTS);
    int referrer_share = muldiv(premium_amount, SHARE_REFERRER, BASIS_POINTS);
    int oracle_share = muldiv(premium_amount, SHARE_ORACLE, BASIS_POINTS);
    int protocol_share = muldiv(premium_amount, SHARE_PROTOCOL, BASIS_POINTS);
    int governance_share = muldiv(premium_amount, SHARE_GOVERNANCE, BASIS_POINTS);
    int reserve_share = muldiv(premium_amount, SHARE_RESERVE, BASIS_POINTS);
    int tradfi_share = muldiv(premium_amount, SHARE_TRADFI, BASIS_POINTS);

    ;; Send to Primary Vault (async message 1)
    cell msg1 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(primary_vault_address)
        .store_coins(primary_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x03, 32)  ;; op: receive_premium_share
        .store_coins(primary_share)
        .store_uint(policy_id, 64)
        .end_cell();
    send_raw_message(msg1, 1);

    ;; Send to Secondary Vault (async message 2)
    cell msg2 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(secondary_vault_address)
        .store_coins(secondary_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x03, 32)
        .store_coins(secondary_share)
        .store_uint(policy_id, 64)
        .end_cell();
    send_raw_message(msg2, 1);

    ;; Send to Referral Manager (async message 3)
    cell msg3 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(referral_manager_address)
        .store_coins(referrer_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x03, 32)  ;; op: distribute_referral_rewards
        .store_coins(referrer_share)
        .store_slice(user_address)
        .store_uint(policy_id, 64)
        .end_cell();
    send_raw_message(msg3, 1);

    ;; Send to Oracle Rewards (async message 4)
    cell msg4 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(oracle_rewards_address)
        .store_coins(oracle_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x04, 32)  ;; op: distribute_oracle_fee
        .store_coins(oracle_share)
        .end_cell();
    send_raw_message(msg4, 1);

    ;; Send to Protocol Treasury (async message 5)
    cell msg5 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(protocol_treasury_address)
        .store_coins(protocol_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x04, 32)
        .store_coins(protocol_share)
        .store_uint(policy_id, 64)
        .end_cell();
    send_raw_message(msg5, 1);

    ;; Send to Governance Rewards (async message 6)
    cell msg6 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(governance_rewards_address)
        .store_coins(governance_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x05, 32)  ;; op: receive_governance_share
        .store_coins(governance_share)
        .end_cell();
    send_raw_message(msg6, 1);

    ;; Send to Reserve Fund (async message 7)
    cell msg7 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(reserve_fund_address)
        .store_coins(reserve_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x05, 32)
        .store_coins(reserve_share)
        .store_uint(policy_id, 64)
        .end_cell();
    send_raw_message(msg7, 1);

    ;; Send to TradFi Buffer (async message 8)
    cell msg8 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(tradfi_buffer_address)
        .store_coins(tradfi_share)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x06, 32)  ;; op: receive_premium_share
        .store_coins(tradfi_share)
        .store_uint(policy_id, 64)
        .end_cell();
    send_raw_message(msg8, 1);

    ;; Update stats
    total_premiums_distributed += premium_amount;
    distribution_count += 1;
    save_data();

    ;; Emit event
    emit_log(0x60, begin_cell()
        .store_uint(policy_id, 64)
        .store_coins(premium_amount)
        .store_coins(primary_share)
        .store_coins(secondary_share)
        .store_coins(referrer_share)
        .store_coins(oracle_share)
        .end_cell().begin_parse());
}

;; Admin functions
() set_primary_vault(slice sender_address, slice new_address) impure {
    check_owner(sender_address);
    primary_vault_address = new_address;
    save_data();
}

() set_referral_manager(slice sender_address, slice new_address) impure {
    check_owner(sender_address);
    referral_manager_address = new_address;
    save_data();
}

() set_oracle_rewards(slice sender_address, slice new_address) impure {
    check_owner(sender_address);
    oracle_rewards_address = new_address;
    save_data();
}

() set_governance_rewards(slice sender_address, slice new_address) impure {
    check_owner(sender_address);
    governance_rewards_address = new_address;
    save_data();
}

() set_tradfi_buffer(slice sender_address, slice new_address) impure {
    check_owner(sender_address);
    tradfi_buffer_address = new_address;
    save_data();
}

;; Get methods
(int, int, int, int, int, int, int, int) get_distribution_percentages() method_id {
    return (SHARE_PRIMARY, SHARE_SECONDARY, SHARE_REFERRER, SHARE_ORACLE,
            SHARE_PROTOCOL, SHARE_GOVERNANCE, SHARE_RESERVE, SHARE_TRADFI);
}

int get_total_premiums_distributed() method_id {
    load_data();
    return total_premiums_distributed;
}

int get_distribution_count() method_id {
    load_data();
    return distribution_count;
}

;; Recv internal
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == 0x01) {  ;; distribute_premium
        int premium_amount = in_msg_body~load_coins();
        int policy_id = in_msg_body~load_uint(64);
        slice user_address = in_msg_body~load_msg_addr();
        distribute_premium(premium_amount, policy_id, user_address);
        return ();
    }

    if (op == 0x10) {  ;; set_primary_vault
        slice new_address = in_msg_body~load_msg_addr();
        set_primary_vault(sender_address, new_address);
        return ();
    }

    if (op == 0x11) {  ;; set_referral_manager
        slice new_address = in_msg_body~load_msg_addr();
        set_referral_manager(sender_address, new_address);
        return ();
    }

    if (op == 0x12) {  ;; set_oracle_rewards
        slice new_address = in_msg_body~load_msg_addr();
        set_oracle_rewards(sender_address, new_address);
        return ();
    }

    if (op == 0x13) {  ;; set_governance_rewards
        slice new_address = in_msg_body~load_msg_addr();
        set_governance_rewards(sender_address, new_address);
        return ();
    }

    if (op == 0x14) {  ;; set_tradfi_buffer
        slice new_address = in_msg_body~load_msg_addr();
        set_tradfi_buffer(sender_address, new_address);
        return ();
    }

    throw(0xffff);
}

;; Note: emit_log() is now implemented in stdlib.fc
;; AdvancedPremiumDistributor uses event logging for premium distribution operations
