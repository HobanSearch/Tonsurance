version: '3.8'

services:
  # OCaml Backend - Oracle Aggregator & Pricing Engine
  ocaml-backend:
    build:
      context: .
      dockerfile: Dockerfile.ocaml
    container_name: tonsurance-ocaml
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - REDSTONE_API_KEY=${REDSTONE_API_KEY}
      - PYTH_API_KEY=${PYTH_API_KEY}
      - CHAINLINK_API_KEY=${CHAINLINK_API_KEY}
      - LOG_LEVEL=info
    networks:
      - tonsurance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PricingOracleKeeper - Bridges OCaml to TON contracts
  pricing-oracle-keeper:
    build:
      context: ./Tonsurance
      dockerfile: Dockerfile.keeper
    container_name: tonsurance-pricing-keeper
    restart: unless-stopped
    depends_on:
      - ocaml-backend
    environment:
      - TON_RPC_URL=${TON_RPC_URL:-https://toncenter.com/api/v2/jsonRPC}
      - KEEPER_MNEMONIC=${KEEPER_MNEMONIC}
      - PRICING_ORACLE_ADDRESS=${PRICING_ORACLE_ADDRESS}
      - OCAML_BACKEND_URL=http://ocaml-backend:8080
      - POLYMARKET_API_KEY=${POLYMARKET_API_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - ALLIANZ_API_KEY=${ALLIANZ_API_KEY}
      - UPDATE_INTERVAL=5
      - LOG_LEVEL=info
    networks:
      - tonsurance-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # BridgeHealthKeeper - Monitors cross-chain bridges
  bridge-health-keeper:
    build:
      context: ./Tonsurance
      dockerfile: Dockerfile.keeper
    container_name: tonsurance-bridge-keeper
    restart: unless-stopped
    depends_on:
      - ocaml-backend
    environment:
      - TON_RPC_URL=${TON_RPC_URL:-https://toncenter.com/api/v2/jsonRPC}
      - KEEPER_MNEMONIC=${KEEPER_MNEMONIC}
      - PRICING_ORACLE_ADDRESS=${PRICING_ORACLE_ADDRESS}
      - OCAML_BACKEND_URL=http://ocaml-backend:8080
      - BRIDGE_UPDATE_INTERVAL=60
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - LOG_LEVEL=info
    networks:
      - tonsurance-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend - React + Vite
  frontend:
    build:
      context: ./Tonsurance/frontend
      dockerfile: Dockerfile
      args:
        - VITE_TON_RPC_URL=${TON_RPC_URL}
        - VITE_OCAML_API_URL=http://ocaml-backend:8080
    container_name: tonsurance-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - ocaml-backend
    networks:
      - tonsurance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Policy and hedge position storage
  postgres:
    image: postgres:15-alpine
    container_name: tonsurance-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=tonsurance
      - POSTGRES_USER=${POSTGRES_USER:-tonsurance}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tonsurance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tonsurance}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Premium quote caching
  redis:
    image: redis:7-alpine
    container_name: tonsurance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - tonsurance-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: tonsurance-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - tonsurance-network

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: tonsurance-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tonsurance-network

  # Nginx - Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: tonsurance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - ocaml-backend
    networks:
      - tonsurance-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  tonsurance-network:
    driver: bridge
