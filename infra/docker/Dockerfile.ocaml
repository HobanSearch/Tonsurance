# Tonsurance Backend Dockerfile
# Multi-stage build for optimized production image

# Stage 1: Build
FROM ocaml/opam:alpine-ocaml-5.1 AS builder

# Install system dependencies
RUN sudo apk add --no-cache \
    gcc \
    g++ \
    make \
    m4 \
    postgresql-dev \
    gmp-dev \
    libffi-dev \
    openblas-dev \
    lapack-dev \
    gsl-dev

# Set working directory
WORKDIR /app

# Copy opam files
COPY tonsurance.opam dune-project ./

# Install OCaml dependencies
RUN opam install . --deps-only -y

# Copy source code (all subdirectories from backend)
COPY api ./api
COPY integration ./integration
COPY types ./types
COPY pricing ./pricing
COPY risk ./risk
COPY escrow ./escrow
COPY monitoring ./monitoring
COPY claims ./claims
COPY daemons ./daemons
COPY pool ./pool
COPY math ./math
COPY float ./float

# Build the project
RUN eval $(opam env) && dune build --release

# Stage 2: Runtime
FROM alpine:3.18

# Install runtime dependencies
RUN apk add --no-cache \
    gmp \
    libffi \
    postgresql-client \
    openblas \
    lapack \
    gsl \
    ca-certificates

# Create app user
RUN addgroup -g 1000 tonsurance && \
    adduser -D -u 1000 -G tonsurance tonsurance

# Set working directory
WORKDIR /app

# Copy built executables from builder
COPY --from=builder /app/_build/default/api/api_server.exe ./tonsurance_api_server
COPY --from=builder /app/_build/default/daemons/risk_management_daemon.exe ./risk_management_daemon

# Create logs directory
RUN mkdir -p /app/logs && chown -R tonsurance:tonsurance /app

# Switch to app user
USER tonsurance

# Expose API port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Default command: run API server
CMD ["./tonsurance_api_server"]
